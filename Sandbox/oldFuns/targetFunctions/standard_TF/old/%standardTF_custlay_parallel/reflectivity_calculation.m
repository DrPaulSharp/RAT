function problem = reflectivity_calculation(problem)

resam = problem.resample;
numberOfContrasts = problem.numberOfContrasts;
geometry = problem.module.experiment_type;
nbairs = problem.nbairs;
nbsubs = problem.nbsubs;
repeats = problem.repeatLayers;
cBacks = problem.contrastBacks;
cShifts = problem.contrastShifts;
cScales = problem.contrastScales;
cNbas = problem.contrastNbas;
cNbss = problem.contrastNbss;
cRes = problem.contrastResolutions;
backs = problem.backs;
shifts = problem.shifts_horisontal;
sf = problem.scalefac;
nba = problem.nba;
nbs = problem.nbs;
res = problem.resolution;
dataPresent = problem.dataPresent;
allData = problem.data;
dataLimits = problem.dataLimits;
simLimits = problem.simLimits;
repeatLayers = problem.repeatLayers;
nParams = length(problem.params);
params = problem.params;
contrastLayers = problem.contrastLayers;
numberOfLayers = problem.numberOfLayers;
layersDetails = problem.layersDetails;
whichType = problem.module.type;
fileHandle = problem.module.fileHandle;
path = char(pwd);%problem.module.path;


[outSsubs,...
backgs,...
qshifts,...
sfs,...
nbas,...
nbss,...
resols,...
chis,...
reflectivity,...
Simulation,...
shifted_data,...
layerSlds,...
sldProfiles,...
allLayers,...
allRoughs] = standardTF_custlay_parallel_mex(resam, ...
                numberOfContrasts, ...
                geometry, ...
                nbairs , ...
                nbsubs , ...
                repeats , ...
                cBacks , ...
                cShifts , ...
                cScales , ...
                cNbas , ...
                cNbss, ...
                cRes , ...
                backs , ...
                shifts , ...
                sf, ...
                nba , ...
                nbs , ...
                res , ...
                dataPresent , ...
                allData , ...
                dataLimits , ...
                simLimits , ...
                repeatLayers , ...
                nParams , ...
                params , ...
                contrastLayers , ...
                numberOfLayers , ...
                layersDetails , ...
                whichType , ...
                fileHandle , ...
                path);










problem.ssubs = outSsubs;
problem.backgrounds = backgs;
problem.qshifts = qshifts;
problem.scalefactors = sfs;
problem.nbairs = nbas;
problem.nbsubs = nbss;
problem.resolutions = resols;
problem.calculations.all_chis = chis;
problem.calculations.sum_chi = sum(chis);
problem.calculations.reflectivity = reflectivity;
problem.calculations.Simulation = Simulation;
problem.shifted_data = shifted_data;
problem.layers = layerSlds;
problem.calculations.slds = sldProfiles;
problem.allLayers = allLayers;
problem.allSubrough = allRoughs;

end

