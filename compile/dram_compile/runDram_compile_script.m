% RUNDRAM_COMPILE_SCRIPT   Generate MEX-function runDram_mex from runDram.
% 
% Script generated from project 'runDram.prj' on 30-Apr-2021.
% 
% See also CODER, CODER.CONFIG, CODER.TYPEOF, CODEGEN.

%% Create configuration object of class 'coder.MexCodeConfig'.
cfg = coder.config('mex');
cfg.GenerateReport = true;
cfg.EnableJIT = true;

%% Define argument types for entry-point 'runDram'.
ARGS = cell(1,1);
ARGS{1} = cell(5,1);
ARGS_1_1 = struct;
ARGS_1_1.contrastBacks = coder.typeof(0,[1 Inf],[0 1]);
ARGS_1_1.contrastBacksType = coder.typeof(0,[1 Inf],[0 1]);
ARGS_1_1.TF = coder.typeof('X',[1 Inf],[0 1]);
ARGS_1_1.resample = coder.typeof(0,[1 Inf],[0 1]);
ARGS_1_1.dataPresent = coder.typeof(0,[1 Inf],[0 1]);
ARGS_1_1.numberOfContrasts = coder.typeof(0);
ARGS_1_1.geometry = coder.typeof('X',[1 Inf],[0 1]);
ARGS_1_1.contrastShifts = coder.typeof(0,[1 Inf],[0 1]);
ARGS_1_1.contrastScales = coder.typeof(0,[1 Inf],[0 1]);
ARGS_1_1.contrastNbas = coder.typeof(0,[1 Inf],[0 1]);
ARGS_1_1.contrastNbss = coder.typeof(0,[1 Inf],[0 1]);
ARGS_1_1.contrastRes = coder.typeof(0,[1 Inf],[0 1]);
ARGS_1_1.backs = coder.typeof(0,[1 Inf],[0 1]);
ARGS_1_1.shifts = coder.typeof(0,[1 Inf],[0 1]);
ARGS_1_1.sf = coder.typeof(0,[1 Inf],[0 1]);
ARGS_1_1.nba = coder.typeof(0,[1 Inf],[0 1]);
ARGS_1_1.nbs = coder.typeof(0,[1 Inf],[0 1]);
ARGS_1_1.res = coder.typeof(0,[1 Inf],[0 1]);
ARGS_1_1.params = coder.typeof(0,[1 Inf],[0 1]);
ARGS_1_1.numberOfLayers = coder.typeof(0);
ARGS_1_1.modelType = coder.typeof('X',[1 Inf],[0 1]);
ARGS_1_1.contrastCustomFiles = coder.typeof(0,[1 Inf],[0 1]);
ARGS_1_1.fitpars = coder.typeof(0,[Inf Inf],[1 1]);
ARGS_1_1.otherpars = coder.typeof(0,[Inf Inf],[1 1]);
ARGS_1_1.fitconstr = coder.typeof(0,[Inf  2],[1 0]);
ARGS_1_1.otherconstr = coder.typeof(0,[Inf  2],[1 0]);
ARGS{1}{1} = coder.typeof(ARGS_1_1);
ARGS_1_2 = cell([1 14]);
ARG = coder.typeof(0,[1 2]);
ARGS_1_2{1} = coder.typeof({ARG}, [1 Inf],[0 1]);
ARG = coder.typeof(0,[Inf  3],[1 0]);
ARGS_1_2{2} = coder.typeof({ARG}, [1 3]);
ARG = coder.typeof(0,[1 2]);
ARGS_1_2{3} = coder.typeof({ARG}, [1 Inf],[0 1]);
ARG = coder.typeof(0,[1 2]);
ARGS_1_2{4} = coder.typeof({ARG}, [1 Inf],[0 1]);
ARG = coder.typeof(0,[1 Inf],[0 1]);
ARGS_1_2{5} = coder.typeof({ARG}, [1 3]);
ARG = coder.typeof(0,[1 5],[0 1]);
ARGS_1_2{6} = coder.typeof({ARG}, [1 Inf],[0 1]);
ARG = coder.typeof('X',[1 Inf],[0 1]);
ARGS_1_2{7} = coder.typeof({ARG}, [1 8]);
ARG = coder.typeof('X',[1 Inf],[0 1]);
ARGS_1_2{8} = coder.typeof({ARG}, [1 Inf],[0 1]);
ARG = coder.typeof('X',[1 Inf],[0 1]);
ARGS_1_2{9} = coder.typeof({ARG}, [1 Inf],[0 1]);
ARG = coder.typeof('X',[1 Inf],[0 1]);
ARGS_1_2{10} = coder.typeof({ARG}, [1 1]);
ARG = coder.typeof('X',[1 7]);
ARGS_1_2{11} = coder.typeof({ARG}, [1 Inf],[0 1]);
ARG = coder.typeof('X',[1 Inf],[0 1]);
ARGS_1_2{12} = coder.typeof({ARG}, [1 Inf],[0 1]);
ARG = coder.typeof('X',[1 Inf],[0 1]);
ARGS_1_2{13} = coder.typeof({ARG}, [1 Inf],[0 1]);
ARG = cell([1 3]);
ARG{1} = coder.typeof('X',[1 Inf],[0 1]);
ARG{2} = coder.typeof('X',[1 Inf],[0 1]);
ARG{3} = coder.typeof('X',[1 Inf],[0 1]);
ARG = coder.typeof(ARG,[1 3]);
ARG = ARG.makeHeterogeneous();
ARGS_1_2{14} = coder.typeof({ARG}, [1 Inf],[0 1]);
ARGS{1}{2} = coder.typeof(ARGS_1_2,[1 14]);
ARGS{1}{2} = ARGS{1}{2}.makeHeterogeneous();
ARGS_1_3 = struct;
ARGS_1_3.params = coder.typeof(0,[Inf  2],[1 0]);
ARGS_1_3.backs = coder.typeof(0,[Inf  2],[1 0]);
ARGS_1_3.scales = coder.typeof(0,[Inf  2],[1 0]);
ARGS_1_3.shifts = coder.typeof(0,[Inf  2],[1 0]);
ARGS_1_3.nba = coder.typeof(0,[Inf  2],[1 0]);
ARGS_1_3.nbs = coder.typeof(0,[Inf  2],[1 0]);
ARGS_1_3.res = coder.typeof(0,[Inf  2],[1 0]);
ARGS{1}{3} = coder.typeof(ARGS_1_3);
ARGS_1_4 = struct;
ARGS_1_4_paramPriors = cell([8 3]);
ARGS_1_4_paramPriors{1} = coder.newtype('string');
ARGS_1_4_paramPriors{1}.Properties.Value = coder.typeof('X',[1 7]);
ARGS_1_4_paramPriors{2} = coder.newtype('string');
ARGS_1_4_paramPriors{2}.Properties.Value = coder.typeof('X',[1 7]);
ARGS_1_4_paramPriors{3} = coder.newtype('string');
ARGS_1_4_paramPriors{3}.Properties.Value = coder.typeof('X',[1 7]);
ARGS_1_4_paramPriors{4} = coder.newtype('string');
ARGS_1_4_paramPriors{4}.Properties.Value = coder.typeof('X',[1 7]);
ARGS_1_4_paramPriors{5} = coder.newtype('string');
ARGS_1_4_paramPriors{5}.Properties.Value = coder.typeof('X',[1 7]);
ARGS_1_4_paramPriors{6} = coder.newtype('string');
ARGS_1_4_paramPriors{6}.Properties.Value = coder.typeof('X',[1 7]);
ARGS_1_4_paramPriors{7} = coder.newtype('string');
ARGS_1_4_paramPriors{7}.Properties.Value = coder.typeof('X',[1 7]);
ARGS_1_4_paramPriors{8} = coder.newtype('string');
ARGS_1_4_paramPriors{8}.Properties.Value = coder.typeof('X',[1 7]);
ARGS_1_4_paramPriors{9} = coder.typeof(0);
ARGS_1_4_paramPriors{10} = coder.typeof(0);
ARGS_1_4_paramPriors{11} = coder.typeof(0);
ARGS_1_4_paramPriors{12} = coder.typeof(0);
ARGS_1_4_paramPriors{13} = coder.typeof(0);
ARGS_1_4_paramPriors{14} = coder.typeof(0);
ARGS_1_4_paramPriors{15} = coder.typeof(0);
ARGS_1_4_paramPriors{16} = coder.typeof(0);
ARGS_1_4_paramPriors{17} = coder.typeof(0);
ARGS_1_4_paramPriors{18} = coder.typeof(0);
ARGS_1_4_paramPriors{19} = coder.typeof(0);
ARGS_1_4_paramPriors{20} = coder.typeof(0);
ARGS_1_4_paramPriors{21} = coder.typeof(0);
ARGS_1_4_paramPriors{22} = coder.typeof(0);
ARGS_1_4_paramPriors{23} = coder.typeof(0);
ARGS_1_4_paramPriors{24} = coder.typeof(0);
ARGS_1_4.paramPriors = coder.typeof(ARGS_1_4_paramPriors,[8 3]);
ARGS_1_4.paramPriors = ARGS_1_4.paramPriors.makeHeterogeneous();
ARGS_1_4_backsPriors = cell([3 3]);
ARGS_1_4_backsPriors{1} = coder.newtype('string');
ARGS_1_4_backsPriors{1}.Properties.Value = coder.typeof('X',[1 7]);
ARGS_1_4_backsPriors{2} = coder.newtype('string');
ARGS_1_4_backsPriors{2}.Properties.Value = coder.typeof('X',[1 7]);
ARGS_1_4_backsPriors{3} = coder.newtype('string');
ARGS_1_4_backsPriors{3}.Properties.Value = coder.typeof('X',[1 7]);
ARGS_1_4_backsPriors{4} = coder.typeof(0);
ARGS_1_4_backsPriors{5} = coder.typeof(0);
ARGS_1_4_backsPriors{6} = coder.typeof(0);
ARGS_1_4_backsPriors{7} = coder.typeof(0);
ARGS_1_4_backsPriors{8} = coder.typeof(0);
ARGS_1_4_backsPriors{9} = coder.typeof(0);
ARGS_1_4.backsPriors = coder.typeof(ARGS_1_4_backsPriors,[3 3]);
ARGS_1_4.backsPriors = ARGS_1_4.backsPriors.makeHeterogeneous();
ARGS_1_4_resolPriors = cell([1 3]);
ARGS_1_4_resolPriors{1} = coder.newtype('string');
ARGS_1_4_resolPriors{1}.Properties.Value = coder.typeof('X',[1 7]);
ARGS_1_4_resolPriors{2} = coder.typeof(0);
ARGS_1_4_resolPriors{3} = coder.typeof(0);
ARGS_1_4.resolPriors = coder.typeof(ARGS_1_4_resolPriors,[1 3]);
ARGS_1_4.resolPriors = ARGS_1_4.resolPriors.makeHeterogeneous();
ARGS_1_4_nbaPriors = cell([1 3]);
ARGS_1_4_nbaPriors{1} = coder.newtype('string');
ARGS_1_4_nbaPriors{1}.Properties.Value = coder.typeof('X',[1 7]);
ARGS_1_4_nbaPriors{2} = coder.typeof(0);
ARGS_1_4_nbaPriors{3} = coder.typeof(0);
ARGS_1_4.nbaPriors = coder.typeof(ARGS_1_4_nbaPriors,[1 3]);
ARGS_1_4.nbaPriors = ARGS_1_4.nbaPriors.makeHeterogeneous();
ARGS_1_4_nbsPriors = cell([3 3]);
ARGS_1_4_nbsPriors{1} = coder.newtype('string');
ARGS_1_4_nbsPriors{1}.Properties.Value = coder.typeof('X',[1 7]);
ARGS_1_4_nbsPriors{2} = coder.newtype('string');
ARGS_1_4_nbsPriors{2}.Properties.Value = coder.typeof('X',[1 7]);
ARGS_1_4_nbsPriors{3} = coder.newtype('string');
ARGS_1_4_nbsPriors{3}.Properties.Value = coder.typeof('X',[1 7]);
ARGS_1_4_nbsPriors{4} = coder.typeof(0);
ARGS_1_4_nbsPriors{5} = coder.typeof(0);
ARGS_1_4_nbsPriors{6} = coder.typeof(0);
ARGS_1_4_nbsPriors{7} = coder.typeof(0);
ARGS_1_4_nbsPriors{8} = coder.typeof(0);
ARGS_1_4_nbsPriors{9} = coder.typeof(0);
ARGS_1_4.nbsPriors = coder.typeof(ARGS_1_4_nbsPriors,[3 3]);
ARGS_1_4.nbsPriors = ARGS_1_4.nbsPriors.makeHeterogeneous();
ARGS_1_4_shiftPriors = cell([1 3]);
ARGS_1_4_shiftPriors{1} = coder.newtype('string');
ARGS_1_4_shiftPriors{1}.Properties.Value = coder.typeof('X',[1 7]);
ARGS_1_4_shiftPriors{2} = coder.typeof(0);
ARGS_1_4_shiftPriors{3} = coder.typeof(0);
ARGS_1_4.shiftPriors = coder.typeof(ARGS_1_4_shiftPriors,[1 3]);
ARGS_1_4.shiftPriors = ARGS_1_4.shiftPriors.makeHeterogeneous();
ARGS{1}{4} = coder.typeof(ARGS_1_4);
ARGS_1_5 = struct;
ARGS_1_5.para = coder.typeof('X',[1 Inf],[0 1]);
ARGS_1_5.proc = coder.typeof('X',[1 Inf],[0 1]);
ARGS_1_5.display = coder.typeof('X',[1 Inf],[0 1]);
ARGS_1_5.tolX = coder.typeof(0);
ARGS_1_5.tolFun = coder.typeof(0);
ARGS_1_5.maxFunEvals = coder.typeof(0);
ARGS_1_5.maxIter = coder.typeof(0);
ARGS_1_5.populationSize = coder.typeof(0);
ARGS_1_5.F_weight = coder.typeof(0);
ARGS_1_5.F_CR = coder.typeof(0);
ARGS_1_5.VTR = coder.typeof(0);
ARGS_1_5.numGen = coder.typeof(0);
ARGS_1_5.strategy = coder.typeof(0);
ARGS_1_5.Nlive = coder.typeof(0);
ARGS_1_5.nmcmc = coder.typeof(0);
ARGS_1_5.propScale = coder.typeof(0);
ARGS_1_5.nsTolerance = coder.typeof(0);
ARGS_1_5.calcSld = coder.typeof(0);
ARGS_1_5.repeats = coder.typeof(0);
ARGS_1_5.nsimu = coder.typeof(0);
ARGS_1_5.burnin = coder.typeof(0);
ARGS_1_5_checks = struct;
ARGS_1_5_checks.params_fitYesNo = coder.typeof(0,[1 Inf],[0 1]);
ARGS_1_5_checks.backs_fitYesNo = coder.typeof(0,[1 Inf],[0 1]);
ARGS_1_5_checks.shifts_fitYesNo = coder.typeof(0,[1 Inf],[0 1]);
ARGS_1_5_checks.scales_fitYesNo = coder.typeof(0,[1 Inf],[0 1]);
ARGS_1_5_checks.nbairs_fitYesNo = coder.typeof(0,[1 Inf],[0 1]);
ARGS_1_5_checks.nbsubs_fitYesNo = coder.typeof(0,[1 Inf],[0 1]);
ARGS_1_5_checks.resol_fitYesNo = coder.typeof(0,[1 Inf],[0 1]);
ARGS_1_5.checks = coder.typeof(ARGS_1_5_checks);
ARGS{1}{5} = coder.typeof(ARGS_1_5);

%% Invoke MATLAB Coder.
codegen -config cfg runDram -args ARGS{1}

